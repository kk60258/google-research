# SSD with Mobilenet v2 configuration for MSCOCO Dataset.
# Users should configure the fine_tune_checkpoint field in the train config as
# well as the label_map_path and input_path fields in the train_input_reader and
# eval_input_reader. Search for "PATH_TO_BE_CONFIGURED" to find the fields that
# should be configured.

model {
  ssd {
    num_classes: 1
    box_coder {
      faster_rcnn_box_coder {
        y_scale: 10.0
        x_scale: 10.0
        height_scale: 5.0
        width_scale: 5.0
      }
    }
    matcher {
      argmax_matcher {
        matched_threshold: 0.3
        unmatched_threshold: 0.3
        ignore_thresholds: false
        negatives_lower_than_unmatched: true
        force_match_for_each_row: true
      }
    }
    similarity_calculator {
      iou_similarity {
      }
    }
    anchor_generator {
      ssd_anchor_generator {
        reduce_boxes_in_lowest_layer: false   
        num_layers: 4
        min_scale: 0.1
        max_scale: 0.5
        aspect_ratios: 1.0
        aspect_ratios: 1.0
        aspect_ratios: 1.0
        aspect_ratios: 2.0
        aspect_ratios: 0.5
        aspect_ratios: 3.0
        aspect_ratios: 0.3333
      }
    }
    image_resizer {
      fixed_shape_resizer {
        height: 300
        width: 300
      }
    }
    box_predictor {
      convolutional_box_predictor {
        use_depthwise: false
        min_depth: 0
        max_depth: 0
        num_layers_before_predictor: 0
        use_dropout: false
        dropout_keep_probability: 0.8
        kernel_size: 3
        box_code_size: 4
        apply_sigmoid_to_scores: false
        conv_hyperparams {
          activation: RELU_6,
          regularizer {
            l2_regularizer {
              weight: 0.00001
            }
          }
          initializer {
            truncated_normal_initializer {
              stddev: 0.03
              mean: 0.0
            }
          }
          batch_norm {
            train: true,
            scale: true,
            center: true,
            decay: 0.9997,
            epsilon: 0.001,
          }
        }
      }
    }
    feature_extractor {
      type: 'ssd_mobilenet_v2'
      min_depth: 16
      depth_multiplier: 1.0
      conv_hyperparams {
        activation: RELU_6,
        regularizer {
          l2_regularizer {
            weight: 0.00001
          }
        }
        initializer {
          truncated_normal_initializer {
            stddev: 0.03
            mean: 0.0
          }
        }
        batch_norm {
          train: true,
          scale: true,
          center: true,
          decay: 0.9997,
          epsilon: 0.001,
        }
      }
      use_depthwise: true
      num_layers: 4
    }
    loss {
      classification_loss {
        weighted_sigmoid_focal {
            alpha: 0.25,
            gamma: 2.0
        }
      }
      localization_loss {
        weighted_smooth_l1 {
        }
      }
      classification_weight: 1.5
      localization_weight: 1.0
    }
    normalize_loss_by_num_matches: true
    post_processing {
      batch_non_max_suppression {
        score_threshold: 0.3
        iou_threshold: 0.3
        max_detections_per_class: 100
        max_total_detections: 100
      }
      score_converter: SIGMOID
    }
  }
}

train_config: {
  batch_size: 24
  optimizer {
    adam_optimizer: {
      learning_rate: {
        cosine_decay_learning_rate {
          learning_rate_base: .002
          total_steps: 100000
          warmup_learning_rate: .0001
          warmup_steps: 10000
        }
      }
    }
  }
  fine_tune_checkpoint: "ssd_mobilenet_v2_coco_2018_03_29/model.ckpt"
  fine_tune_checkpoint_type:  "detection"

  # we restore not only FeatureExtractor but also BoxPredictor. An then only
  # train "BoxPredictor_.\/ClassPredictor.*".
  load_all_detection_checkpoint_vars: true
  # freeze_variables: ["FeatureExtractor.*", "BoxPredictor_.\/BoxEncoding.*"]

  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  num_steps: 200000
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
  data_augmentation_options {
     ssd_random_crop {
          operations {
            min_object_covered: 0.5
            min_aspect_ratio: 0.5
            max_aspect_ratio: 2.0
            min_area: 0.5
            max_area: 1.0
            overlap_thresh: 0.5
            random_coef: 0.15
          }
    }  
  }
}

train_input_reader: {
  tf_record_input_reader {
    input_path: "/tempssd/people_detection/0803_coco_people_detection_train.record"
  }
  label_map_path: "people_detection.pbtxt"
}

eval_config: {
  num_examples: 8000
  # Note: The below line limits the evaluation process to 10 evaluations.
  # Remove the below line to evaluate indefinitely.
  max_evals: 10
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "/tempssd/people_detection/0721_people_detection_testing.record"
  }
  label_map_path: "people_detection.pbtxt"
  shuffle: true
  num_readers: 1
}
